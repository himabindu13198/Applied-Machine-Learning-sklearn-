{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AML HW 4\n",
    "# Submitted by Hima Bindu (hb2635), Swarna Bharathi Mantena (sm4776)\n",
    "# TASK 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>country</th>\n",
       "      <th>description</th>\n",
       "      <th>designation</th>\n",
       "      <th>points</th>\n",
       "      <th>price</th>\n",
       "      <th>province</th>\n",
       "      <th>region_1</th>\n",
       "      <th>region_2</th>\n",
       "      <th>taster_name</th>\n",
       "      <th>taster_twitter_handle</th>\n",
       "      <th>title</th>\n",
       "      <th>variety</th>\n",
       "      <th>winery</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>Italy</td>\n",
       "      <td>Aromas include tropical fruit, broom, brimston...</td>\n",
       "      <td>Vulkà Bianco</td>\n",
       "      <td>87</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Sicily &amp; Sardinia</td>\n",
       "      <td>Etna</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kerin O’Keefe</td>\n",
       "      <td>@kerinokeefe</td>\n",
       "      <td>Nicosia 2013 Vulkà Bianco  (Etna)</td>\n",
       "      <td>White Blend</td>\n",
       "      <td>Nicosia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>Portugal</td>\n",
       "      <td>This is ripe and fruity, a wine that is smooth...</td>\n",
       "      <td>Avidagos</td>\n",
       "      <td>87</td>\n",
       "      <td>15.0</td>\n",
       "      <td>Douro</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Roger Voss</td>\n",
       "      <td>@vossroger</td>\n",
       "      <td>Quinta dos Avidagos 2011 Avidagos Red (Douro)</td>\n",
       "      <td>Portuguese Red</td>\n",
       "      <td>Quinta dos Avidagos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>US</td>\n",
       "      <td>Tart and snappy, the flavors of lime flesh and...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>87</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>Willamette Valley</td>\n",
       "      <td>Willamette Valley</td>\n",
       "      <td>Paul Gregutt</td>\n",
       "      <td>@paulgwine</td>\n",
       "      <td>Rainstorm 2013 Pinot Gris (Willamette Valley)</td>\n",
       "      <td>Pinot Gris</td>\n",
       "      <td>Rainstorm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>US</td>\n",
       "      <td>Pineapple rind, lemon pith and orange blossom ...</td>\n",
       "      <td>Reserve Late Harvest</td>\n",
       "      <td>87</td>\n",
       "      <td>13.0</td>\n",
       "      <td>Michigan</td>\n",
       "      <td>Lake Michigan Shore</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Alexander Peartree</td>\n",
       "      <td>NaN</td>\n",
       "      <td>St. Julian 2013 Reserve Late Harvest Riesling ...</td>\n",
       "      <td>Riesling</td>\n",
       "      <td>St. Julian</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>US</td>\n",
       "      <td>Much like the regular bottling from 2012, this...</td>\n",
       "      <td>Vintner's Reserve Wild Child Block</td>\n",
       "      <td>87</td>\n",
       "      <td>65.0</td>\n",
       "      <td>Oregon</td>\n",
       "      <td>Willamette Valley</td>\n",
       "      <td>Willamette Valley</td>\n",
       "      <td>Paul Gregutt</td>\n",
       "      <td>@paulgwine</td>\n",
       "      <td>Sweet Cheeks 2012 Vintner's Reserve Wild Child...</td>\n",
       "      <td>Pinot Noir</td>\n",
       "      <td>Sweet Cheeks</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0   country                                        description  \\\n",
       "0           0     Italy  Aromas include tropical fruit, broom, brimston...   \n",
       "1           1  Portugal  This is ripe and fruity, a wine that is smooth...   \n",
       "2           2        US  Tart and snappy, the flavors of lime flesh and...   \n",
       "3           3        US  Pineapple rind, lemon pith and orange blossom ...   \n",
       "4           4        US  Much like the regular bottling from 2012, this...   \n",
       "\n",
       "                          designation  points  price           province  \\\n",
       "0                        Vulkà Bianco      87    NaN  Sicily & Sardinia   \n",
       "1                            Avidagos      87   15.0              Douro   \n",
       "2                                 NaN      87   14.0             Oregon   \n",
       "3                Reserve Late Harvest      87   13.0           Michigan   \n",
       "4  Vintner's Reserve Wild Child Block      87   65.0             Oregon   \n",
       "\n",
       "              region_1           region_2         taster_name  \\\n",
       "0                 Etna                NaN       Kerin O’Keefe   \n",
       "1                  NaN                NaN          Roger Voss   \n",
       "2    Willamette Valley  Willamette Valley        Paul Gregutt   \n",
       "3  Lake Michigan Shore                NaN  Alexander Peartree   \n",
       "4    Willamette Valley  Willamette Valley        Paul Gregutt   \n",
       "\n",
       "  taster_twitter_handle                                              title  \\\n",
       "0          @kerinokeefe                  Nicosia 2013 Vulkà Bianco  (Etna)   \n",
       "1            @vossroger      Quinta dos Avidagos 2011 Avidagos Red (Douro)   \n",
       "2           @paulgwine       Rainstorm 2013 Pinot Gris (Willamette Valley)   \n",
       "3                   NaN  St. Julian 2013 Reserve Late Harvest Riesling ...   \n",
       "4           @paulgwine   Sweet Cheeks 2012 Vintner's Reserve Wild Child...   \n",
       "\n",
       "          variety               winery  \n",
       "0     White Blend              Nicosia  \n",
       "1  Portuguese Red  Quinta dos Avidagos  \n",
       "2      Pinot Gris            Rainstorm  \n",
       "3        Riesling           St. Julian  \n",
       "4      Pinot Noir         Sweet Cheeks  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "dataset = pd.read_csv('wine-reviews\\winemag-data-130k-v2.csv')\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 129971 entries, 0 to 129970\n",
      "Data columns (total 14 columns):\n",
      " #   Column                 Non-Null Count   Dtype  \n",
      "---  ------                 --------------   -----  \n",
      " 0   Unnamed: 0             129971 non-null  int64  \n",
      " 1   country                129908 non-null  object \n",
      " 2   description            129971 non-null  object \n",
      " 3   designation            92506 non-null   object \n",
      " 4   points                 129971 non-null  int64  \n",
      " 5   price                  120975 non-null  float64\n",
      " 6   province               129908 non-null  object \n",
      " 7   region_1               108724 non-null  object \n",
      " 8   region_2               50511 non-null   object \n",
      " 9   taster_name            103727 non-null  object \n",
      " 10  taster_twitter_handle  98758 non-null   object \n",
      " 11  title                  129971 non-null  object \n",
      " 12  variety                129970 non-null  object \n",
      " 13  winery                 129971 non-null  object \n",
      "dtypes: float64(1), int64(2), object(11)\n",
      "memory usage: 13.9+ MB\n"
     ]
    }
   ],
   "source": [
    "dataset.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0 129971\n",
      "country 44\n",
      "description 119955\n",
      "designation 37980\n",
      "points 21\n",
      "price 391\n",
      "province 426\n",
      "region_1 1230\n",
      "region_2 18\n",
      "taster_name 20\n",
      "taster_twitter_handle 16\n",
      "title 118840\n",
      "variety 708\n",
      "winery 16757\n"
     ]
    }
   ],
   "source": [
    "for name in dataset.columns:\n",
    "    print(name,len(dataset[name].unique()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation Analysis\n",
    "\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "cont_data = dataset[['price', 'points']]\n",
    "\n",
    "corr = cont_data.corr()\n",
    "ax = sns.heatmap(\n",
    "    corr, \n",
    "    vmin=-1, vmax=1, center=0,\n",
    "    cmap=sns.diverging_palette(20, 220, n=200),\n",
    "    square=True\n",
    ")\n",
    "ax.set_xticklabels(\n",
    "    ax.get_xticklabels(),\n",
    "    rotation=45,import pandas as pd\n",
    "dataset = pd.read_csv('wine-reviews\\winemag-data-130k-v2.csv')\n",
    "dataset.head()\n",
    "    horizontalalignment='right'\n",
    ");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We do not see any strong correlation among these two numeric values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2c9e0888888>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# missing data analysis\n",
    "import missingno as msno \n",
    "msno.heatmap(dataset) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We observe that region is missiong each time the country name is missing which makes sense. We also observe that when the taster name is missin, their twitter handle name is also missing at most times. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task-1.1 \n",
    "Baseline model for predicting wine quality using only non-text features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Approach:\n",
    "\n",
    "Text data columns are: description, title. (are removed) <br> <br>\n",
    "Taster twitter handle is redundant ( all tasters may not have twitter handle, or there may be null entries as is seem from above.),  <br><br>\n",
    "country, variety, winery, province, designation, taster_name, region1, region2 are dealth with as categorical variables.<br><br>\n",
    "Price is the target variable. Therefore, the baseline mode will have:<br><br>\n",
    "price (numeric data)<br><br>\n",
    "country, variety, winery, province, designation, taster_name, region1, region2 (categorical)<br><br>\n",
    "\n",
    "To be target encoded: designation, province, region1, variety, winery because they contain large number of categories. <br><br>\n",
    "\n",
    "# Preprocessing steps: \n",
    "\n",
    "- Removing outliers from price (numeric data) [Feature Engineering]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Target variable \n",
    "import matplotlib.pyplot as plt\n",
    "plt.boxplot(dataset['price'].dropna())\n",
    "plt.title(\"Price box plot\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can remove the outliers of price column (all those above upper quartile + 1.5*inter quartile range) since there are not enough data points in that range of target variable (price) that can help train a model well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Price - upper whishker =  79.0\n",
      "\n",
      "Here is the boxplot of price after the outliers are removed.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stats = dataset['price'].describe()\n",
    "\n",
    "upper_quartile = stats[6]\n",
    "lower_quartile = stats[4]\n",
    "\n",
    "iqr = upper_quartile - lower_quartile\n",
    "upper_whisker = dataset['price'][dataset.price<=upper_quartile+1.5*iqr].max()\n",
    "price_wo_outliers = dataset['price'][dataset.price<=upper_quartile+1.5*iqr]\n",
    "# upper_whisker = data[data<=upper_quartile+1.5*iqr].max()\n",
    "print(\"Price - upper whishker = \", upper_whisker)\n",
    "\n",
    "print(\"\\nHere is the boxplot of price after the outliers are removed.\")\n",
    "import matplotlib.pyplot as plt\n",
    "plt.boxplot(price_wo_outliers)\n",
    "plt.title(\"Price box plot\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.show()\n",
    "\n",
    "dataset_updated = dataset[dataset.price<=upper_quartile+1.5*iqr]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "actual dataset: 129971\n",
      "updated dataset: 113734\n",
      "Difference:  16237\n"
     ]
    }
   ],
   "source": [
    "print('actual dataset:', len(dataset))\n",
    "print('updated dataset:', len(dataset_updated))\n",
    "print('Difference: ',len(dataset) - len(dataset_updated) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By removing the outliers in 'price' column, we were able to reduce more than 16,000 rows of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Updating the Dataset\n",
    "X = dataset_updated.drop([\"Unnamed: 0\",\"description\", \"title\", \"taster_twitter_handle\",\"points\"], axis = 1)\n",
    "y = dataset_updated[\"points\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.38311294467613544"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Data Imputation - Dealing with Missing Values (Mean Imputation for Numeric Features and \n",
    "# 'most frequent' value imputation for categorical features)\n",
    "\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.compose import ColumnTransformer, make_column_transformer\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from category_encoders import TargetEncoder\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y)\n",
    "#imputation\n",
    "from sklearn.base import TransformerMixin\n",
    "\n",
    "class DataFrameImputer(TransformerMixin):\n",
    "    def __init__(self):\n",
    "        pass\n",
    "    def fit(self, X, y=None):\n",
    "        self.fill = pd.Series([X[c].value_counts().index[0]\n",
    "            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X], index=X.columns)\n",
    "        return self\n",
    "\n",
    "    def transform(self, X, y=None):\n",
    "        self.fill = pd.Series([X[c].value_counts().index[0]\n",
    "            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X], index=X.columns)\n",
    "        return X.fillna(self.fill)\n",
    "\n",
    "X_train = DataFrameImputer().fit_transform(X_train)\n",
    "X_test = DataFrameImputer().transform(X_test)\n",
    "\n",
    "#model\n",
    "categorical = X_train.columns[X_train.dtypes == object]\n",
    "# categorical\n",
    "preprocess = make_column_transformer((TargetEncoder(), ['designation', 'province', 'region_1', 'variety', 'winery']), (OneHotEncoder(handle_unknown = 'ignore'), categorical.drop(['designation', 'province', 'region_1', 'variety', 'winery'])))\n",
    "model_lr = make_pipeline(preprocess, LinearRegression())\n",
    "scores_lr = cross_val_score(model_lr, X_train, y_train)\n",
    "\n",
    "np.mean(scores_lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The baseline model gives an R^2 value of 0.38."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task-1.2\n",
    "Simple text-based model using a bag-of-words approach and a linear model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dataset after removing unnecessary features\n",
    "X_t12 = dataset_updated.drop([\"Unnamed: 0\", \"taster_twitter_handle\",\"points\"], axis = 1)\n",
    "y_t12 = dataset_updated[\"points\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data Imputation\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_t12, y_t12)\n",
    "#imputation\n",
    "from sklearn.base import TransformerMixin\n",
    "\n",
    "class DataFrameImputer(TransformerMixin):\n",
    "    def __init__(self):\n",
    "        pass\n",
    "    def fit(self, X, y=None):\n",
    "        self.fill = pd.Series([X[c].value_counts().index[0]\n",
    "            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X], index=X.columns)\n",
    "        return self\n",
    "\n",
    "    def transform(self, X, y=None):\n",
    "        self.fill = pd.Series([X[c].value_counts().index[0]\n",
    "            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X], index=X.columns)\n",
    "        return X.fillna(self.fill)\n",
    "\n",
    "X_train = DataFrameImputer().fit_transform(X_train)\n",
    "X_test = DataFrameImputer().transform(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4567234028438188"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from scipy.sparse import hstack\n",
    "\n",
    "X_train_df_title = vect.fit_transform(X_train['title'])\n",
    "vect = CountVectorizer(min_df = 2)\n",
    "X_train_df4 = vect.fit_transform(X_train['description'])\n",
    "X_train_bow_only = hstack([X_train_df4,X_train_df_title])\n",
    "\n",
    "#model\n",
    "lr = LinearRegression().fit(X_train_bow_only, y_train)\n",
    "scores_lr = cross_val_score(lr, X_train_bow_only, y_train) #cross val score\n",
    "np.mean(scores_lr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get an R^2 value of 0.454 for our BoG + linear model. The score has become better in this case compared to baseline model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.455687742344411"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing stop words\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "# print(X_train_df_title.shape)\n",
    "vect = CountVectorizer(min_df = 2, stop_words='english')\n",
    "X_train_df_title_sw = vect.fit_transform(X_train['title'])\n",
    "X_train_df4_sw = vect.fit_transform(X_train['description'])\n",
    "X_train_bow_sw = hstack([X_train_df4_sw,X_train_df_title_sw])\n",
    "\n",
    "#model\n",
    "lr_sw = LinearRegression().fit(X_train_bow_sw, y_train)\n",
    "scores_lr_sw = cross_val_score(lr_sw, X_train_bow_sw, y_train)\n",
    "np.mean(scores_lr_sw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, removing stopwords has improved the R^2 value slightly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7143431711421696"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#trying ridge regression\n",
    "\n",
    "from sklearn.linear_model import Ridge\n",
    "#without removing stop words\n",
    "X_train_bow_only = hstack([X_train_df4,X_train_df_title])\n",
    "ridge = Ridge().fit(X_train_bow_only, y_train)\n",
    "scores_ridge = cross_val_score(ridge, X_train_bow_only, y_train)\n",
    "\n",
    "np.mean(scores_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7088730460545453"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing stop words -- ridge regression\n",
    "\n",
    "vect = CountVectorizer(min_df = 2, stop_words='english')\n",
    "X_train_df_title_sw = vect.fit_transform(X_train['title'])\n",
    "X_train_df4_sw = vect.fit_transform(X_train['description'])\n",
    "X_train_bow_sw = hstack([X_train_df4_sw,X_train_df_title_sw])\n",
    "\n",
    "#model\n",
    "ridge_sw = Ridge().fit(X_train_bow_sw, y_train)\n",
    "scores_ridge_sw = cross_val_score(ridge_sw, X_train_bow_sw, y_train)\n",
    "np.mean(scores_ridge_sw)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ridge Regression performed better than Linear Regression. We got 71 percent accuracy with Ridge Regression - without removing stop words in the BoW model. To find the best hyperparameters in Ridge Regression, we can perform GridSearch on it as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score:  0.7394385823569529\n",
      "Best parameters:  {'countvectorizer__min_df': 1, 'normalizer': None, 'ridge__alpha': 10.0}\n"
     ]
    }
   ],
   "source": [
    "### GridSearchCV on Ridge Regression\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.preprocessing import Normalizer\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "\n",
    "X_train[\"descrption+title\"] = X_train[\"description\"] + X_train[\"title\"]\n",
    "\n",
    "param_grid = {\"ridge__alpha\": [1.0, 5.0, 10.0, 15.0, 20.0],\n",
    "              \"countvectorizer__min_df\": [1, 2, 3],\n",
    "              \"normalizer\": [None, Normalizer()]\n",
    "             }\n",
    "grid_ridge = GridSearchCV(make_pipeline(CountVectorizer(), Normalizer(), Ridge()),\n",
    "                    param_grid=param_grid, cv=5)\n",
    "grid_ridge.fit(X_train['descrption+title'], y_train)\n",
    "print(\"Best score: \", grid_ridge.best_score_)\n",
    "print(\"Best parameters: \", grid_ridge.best_params_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "def plot_graph(X, y, title, xlabel, ylabel, need_log_x, lab):\n",
    "    plt.plot(X, y, label=lab)\n",
    "    if (need_log_x == 1):\n",
    "        plt.xscale('log')\n",
    "    plt.title(title)\n",
    "    plt.xlabel(xlabel)\n",
    "    plt.xticks(np.arange(0, 21, step = 2))\n",
    "    plt.ylabel(ylabel)\n",
    "    plt.grid()\n",
    "    if lab:\n",
    "        plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ridge_vals = [d['ridge__alpha'] for d in grid_ridge.cv_results_['params'][:5]]\n",
    "# plot\n",
    "plot_graph(ridge_vals, grid_ridge.cv_results_['mean_test_score'][:5].tolist(), 'Ridge Regression model', 'alpha', 'R^2', 0, None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We get the best parameter as: alpha = 10."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task-1.3\n",
    "using n-grams, characters, tf-idf rescaling and possibly other ways to tune the BoW\n",
    "model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7582854000678146"
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#n-grams\n",
    "\n",
    "cv = CountVectorizer(ngram_range=(1, 2), stop_words = 'english')\n",
    "X_train_df_title_sw_ng = cv.fit_transform(X_train['title'])\n",
    "X_train_df4_sw_ng = cv.fit_transform(X_train['description'])\n",
    "X_train_bow_sw_ng = hstack([X_train_df4_sw_ng,X_train_df_title_sw_ng])\n",
    "\n",
    "#model\n",
    "ridge = Ridge(alpha = 10).fit(X_train_bow_sw_ng, y_train)\n",
    "scores_ridge = cross_val_score(ridge, X_train_bow_sw_ng, y_train)\n",
    "\n",
    "np.mean(scores_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7600118911616572"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#n-grams without removing stop words\n",
    "\n",
    "cv = CountVectorizer(ngram_range=(1, 2))\n",
    "X_train_df_title_ng = cv.fit_transform(X_train['title'])\n",
    "X_train_df4_ng = cv.fit_transform(X_train['description'])\n",
    "X_train_bow_ng = hstack([X_train_df4_ng,X_train_df_title_ng])\n",
    "\n",
    "#model\n",
    "ridge = Ridge(alpha = 10).fit(X_train_bow_ng, y_train)\n",
    "scores_ridge = cross_val_score(ridge, X_train_bow_ng, y_train)\n",
    "\n",
    "np.mean(scores_ridge)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "N Grams gives better R^2 value (without removing stop words) which is 0.76."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6974463771935193"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#tf-idf\n",
    "\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, TfidfTransformer\n",
    "cv_tfidf = TfidfVectorizer()\n",
    "X_train_df_title_tfidf = cv_tfidf.fit_transform(X_train['title'])\n",
    "X_train_df4_tfidf = cv_tfidf.fit_transform(X_train['description'])\n",
    "X_train_bow_tfidf = hstack([X_train_df4_tfidf,X_train_df_title_tfidf])\n",
    "\n",
    "#model\n",
    "ridge = Ridge(alpha = 10).fit(X_train_bow_tfidf, y_train)\n",
    "scores_ridge = cross_val_score(ridge, X_train_bow_tfidf, y_train)\n",
    "\n",
    "np.mean(scores_ridge)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7093242211667405"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#character n-gram (respecting boundaries)\n",
    "cv_cng = CountVectorizer(ngram_range=(2, 3), analyzer=\"char_wb\")\n",
    "\n",
    "X_train_df_title_cng = cv_cng.fit_transform(X_train['title'])\n",
    "X_train_df4_cng = cv_cng.fit_transform(X_train['description'])\n",
    "X_train_bow_cng = hstack([X_train_df4_cng,X_train_df_title_cng])\n",
    "\n",
    "#model\n",
    "ridge = Ridge(alpha = 10).fit(X_train_bow_cng, y_train)\n",
    "scores_ridge = cross_val_score(ridge, X_train_bow_cng, y_train)\n",
    "\n",
    "np.mean(scores_ridge)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"Be aware that you might need to adjust the (regularization of the) linear model for\n",
    "different feature sets.\" ???\n",
    "Best score was obtained for : ridge regression model with n grams. The accuracy obtained is 0.76."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 1.4\n",
    "Combine the non-text features and the text features. How does adding those features\n",
    "improve upon just using bag-of-words?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>656167</th>\n",
       "      <th>656168</th>\n",
       "      <th>656169</th>\n",
       "      <th>656170</th>\n",
       "      <th>656171</th>\n",
       "      <th>656172</th>\n",
       "      <th>656173</th>\n",
       "      <th>656174</th>\n",
       "      <th>656175</th>\n",
       "      <th>656176</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 656177 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   0       1       2       3       4       5       6       7       8       \\\n",
       "0       0       0       0       0       0       0       0       0       0   \n",
       "1       0       0       0       0       0       0       0       0       0   \n",
       "2       0       0       0       0       0       0       0       0       0   \n",
       "3       0       0       0       0       0       0       0       0       0   \n",
       "4       0       0       0       0       0       0       0       0       0   \n",
       "\n",
       "   9       ...  656167  656168  656169  656170  656171  656172  656173  \\\n",
       "0       0  ...       0       0       0       0       0       0       0   \n",
       "1       0  ...       0       0       0       0       0       0       0   \n",
       "2       0  ...       0       0       0       0       0       0       0   \n",
       "3       0  ...       0       0       0       0       0       0       0   \n",
       "4       0  ...       0       0       0       0       0       0       0   \n",
       "\n",
       "   656174  656175  656176  \n",
       "0       0       0       0  \n",
       "1       0       0       0  \n",
       "2       0       0       0  \n",
       "3       0       0       0  \n",
       "4       0       0       0  \n",
       "\n",
       "[5 rows x 656177 columns]"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating new feature combining text data features\n",
    "X_train[\"description+title\"] = X_train[\"description\"] + X_train[\"title\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.77689179602282"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_feature = ['country', 'designation', 'province',\n",
    "'region_1', 'region_2', 'taster_name','variety', 'winery']\n",
    "text_feature = ['description','title']\n",
    "cont_feature = ['price']\n",
    "\n",
    "preprocess = make_column_transformer(('passthrough', cont_feature),(TargetEncoder(), ['designation', 'province', 'region_1', 'variety', 'winery']),\n",
    "(OneHotEncoder(handle_unknown = 'ignore'), ['country','region_2','taster_name']),(CountVectorizer(ngram_range=(1, 2)),'description+title'))\n",
    "model_rr = make_pipeline(preprocess, Ridge(alpha = 10))\n",
    "scores_rr = cross_val_score(model_rr, X_train, y_train)\n",
    "\n",
    "np.mean(scores_rr)\n",
    "# make_pipeline(preprocess).fit_transform(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The accuracy increased when text-data features (from BoG model) were combined with non-text data features. This can be attributed to the fact that more features were available for the model to learn from. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X_train' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-931765772341>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mX_train\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'X_train' is not defined"
     ]
    }
   ],
   "source": [
    "X_train"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
